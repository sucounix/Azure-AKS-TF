trigger:
  branches:
    include:
    - master

  paths:
    include:
    - 01-infra/**

pool: bes-runner

variables:
- name: DEV_ENVIRONMENT
  value: Dev

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            sudo apt install unzip

      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/01-infra/'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'

      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'

      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/01-infra/'
          backendType: 'azurerm'
          backendServiceArm: 'terraform-aks-azurerm-svc-con'
          backendAzureRmResourceGroupName: 'suco-Dev-tfstate-rg'
          backendAzureRmStorageAccountName: 'sucotfstorage'
          backendAzureRmContainerName: 'core-tfstate'
          backendAzureRmKey: 'terraform.tfstate'
          allowTelemetryCollection: false

      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/01-infra/'
          allowTelemetryCollection: false

- stage: DeployAKSClusters
  jobs:
    - deployment: DeployDevAKSCluster
      displayName: DeployDevAKSCluster
      pool: bes-runner
      environment: $(DEV_ENVIRONMENT)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadSecureFile@1
              displayName: Download SSH Key
              name: sshkey
              inputs:
                secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'

            - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
              displayName: Terraform Install
              inputs:
                terraformVersion: 'latest'

            - task: TerraformCLI@0
              displayName: Terraform Init
              inputs:
                command: 'init'
                commandOptions: '-migrate-state'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                backendType: 'azurerm'
                backendServiceArm: 'terraform-aks-azurerm-svc-con'
                backendAzureRmResourceGroupName: 'suco-$(DEV_ENVIRONMENT)-tfstate-rg'
                backendAzureRmStorageAccountName: 'sucotfstorage'
                backendAzureRmContainerName: 'core-tfstate'
                backendAzureRmKey: 'terraform.tfstate'
                allowTelemetryCollection: false

            - task: TerraformCLI@0
              displayName: Terraform Plan
              inputs:
                command: 'plan'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                environmentServiceName: 'terraform-aks-azurerm-svc-con'
                commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false

            - task: TerraformCLI@0
              displayName: Terraform Apply
              inputs:
                command: 'apply'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                environmentServiceName: 'terraform-aks-azurerm-svc-con'
                commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false
            # - task: TerraformCLI@0
            #   displayName: Terraform Destroy
            #   inputs:
            #     command: 'destroy'
            #     workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
            #     allowTelemetryCollection: true

            - task: Bash@3
              displayName: Clean
              inputs:
                targetType: 'inline'
                script: |
                  cd $(Pipeline.Workspace)/terraform-manifests-out && rm -rf *.*
